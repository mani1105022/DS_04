{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ghOD3eg6-MAY"
      },
      "source": [
        "## DATA SCIENCE\n",
        "Prasunet_DS_04\n",
        "\n",
        "\n",
        "TASK-04\n",
        "\n",
        " Analyze and visualize sentiment patterns in social media data to\n",
        " understand public opinion and attitudes towards specific topics or\n",
        " brands."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "alOCi3mU-VaL"
      },
      "source": [
        "## Sample Dataset:\n",
        "https://data.world/crowdflower/apple-twitter-sentiment"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UM6Ix9QKVKrt"
      },
      "source": [
        "Programmer :MANIKANDAN K\n",
        "\n",
        "https://www.linkedin.com/in/mani-kandan-812b48250/\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Here's a brief overview of the columns:\n",
        "\n",
        "1. _unit_id: Unique identifier for the unit.\n",
        "2. _golden: Boolean indicating if the unit is a golden unit.\n",
        "3. _unit_state: State of the unit.\n",
        "4. _trusted_judgments: Number of trusted judgments.\n",
        "5. _last_judgment_at: Timestamp of the last judgment.\n",
        "6. sentiment: Sentiment label.\n",
        "7. sentiment:confidence: Confidence level of the sentiment.\n",
        "8. date: Date of the tweet.\n",
        "9. id: Unique identifier for the tweet.\n",
        "10. query: Query used to retrieve the tweet.\n",
        "11. sentiment_gold: Gold sentiment label.\n",
        "12. text: Text of the tweet."
      ],
      "metadata": {
        "id": "RPttQb8bDw2X"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xQxixuEUVNlB"
      },
      "source": [
        "##1.load a Data Sets:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "TAFTRmuk8FAR",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "95321946-6911-473f-d833-70199a5e4c08"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   2401  Borderlands  Positive  \\\n",
            "0  2401  Borderlands  Positive   \n",
            "1  2401  Borderlands  Positive   \n",
            "2  2401  Borderlands  Positive   \n",
            "3  2401  Borderlands  Positive   \n",
            "4  2401  Borderlands  Positive   \n",
            "\n",
            "  im getting on borderlands and i will murder you all ,  \n",
            "0  I am coming to the borders and I will kill you...     \n",
            "1  im getting on borderlands and i will kill you ...     \n",
            "2  im coming on borderlands and i will murder you...     \n",
            "3  im getting on borderlands 2 and i will murder ...     \n",
            "4  im getting into borderlands and i can murder y...     \n",
            "   3364   Facebook Irrelevant  \\\n",
            "0   352     Amazon    Neutral   \n",
            "1  8312  Microsoft   Negative   \n",
            "2  4371      CS-GO   Negative   \n",
            "3  4433     Google    Neutral   \n",
            "4  6273       FIFA   Negative   \n",
            "\n",
            "  I mentioned on Facebook that I was struggling for motivation to go for a run the other day, which has been translated by Tomâ€™s great auntie as â€˜Hayley canâ€™t get out of bedâ€™ and told to his grandma, who now thinks Iâ€™m a lazy, terrible person ðŸ¤£  \n",
            "0  BBC News - Amazon boss Jeff Bezos rejects clai...                                                                                                                                                                                                  \n",
            "1  @Microsoft Why do I pay for WORD when it funct...                                                                                                                                                                                                  \n",
            "2  CSGO matchmaking is so full of closet hacking,...                                                                                                                                                                                                  \n",
            "3  Now the President is slapping Americans in the...                                                                                                                                                                                                  \n",
            "4  Hi @EAHelp Iâ€™ve had Madeleine McCann in my cel...                                                                                                                                                                                                  \n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Load the data\n",
        "# Load the CSV file\n",
        "file_path = '/content/Apple-Twitter-Sentiment-DFE.csv'\n",
        "data = pd.read_csv(file_path, encoding='ISO-8859-1')\n",
        "\n",
        "# Display the first few rows of the datasets\n",
        "print(training_data.head())\n",
        "print(validation_data.head())\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ogUtl86OVmKV"
      },
      "source": [
        "##2.Data Cleaning and Preprocessing:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ZRlDzhiCVsaa",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "98eaaa4c-bfe1-4dda-e981-c03403f4e463"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-41-feb7978a2f5a>:2: UserWarning: Could not infer format, so each element will be parsed individually, falling back to `dateutil`. To ensure parsing is consistent and as-expected, please specify a format.\n",
            "  data['date'] = pd.to_datetime(data['date'], errors='coerce')\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "    _unit_id  _golden _unit_state  _trusted_judgments _last_judgment_at  \\\n",
            "0  623495513     True      golden                  10               NaN   \n",
            "1  623495514     True      golden                  12               NaN   \n",
            "2  623495515     True      golden                  10               NaN   \n",
            "3  623495516     True      golden                  17               NaN   \n",
            "4  623495517    False   finalized                   3    12/12/14 12:14   \n",
            "\n",
            "   sentiment  sentiment:confidence                      date            id  \\\n",
            "0        NaN                0.6264 2014-12-01 19:30:03+00:00  5.400000e+17   \n",
            "1        NaN                0.8129 2014-12-01 19:43:51+00:00  5.400000e+17   \n",
            "2        NaN                1.0000 2014-12-01 19:50:28+00:00  5.400000e+17   \n",
            "3        NaN                0.5848 2014-12-01 20:26:34+00:00  5.400000e+17   \n",
            "4        NaN                0.6474 2014-12-01 20:29:33+00:00  5.400000e+17   \n",
            "\n",
            "             query   sentiment_gold  \\\n",
            "0  #AAPL OR @Apple  3\\nnot_relevant   \n",
            "1  #AAPL OR @Apple             3\\n1   \n",
            "2  #AAPL OR @Apple                3   \n",
            "3  #AAPL OR @Apple             3\\n1   \n",
            "4  #AAPL OR @Apple              NaN   \n",
            "\n",
            "                                                text  \n",
            "0  #AAPL:The 10 best Steve Jobs emails ever...htt...  \n",
            "1  RT @JPDesloges: Why AAPL Stock Had a Mini-Flas...  \n",
            "2  My cat only chews @apple cords. Such an #Apple...  \n",
            "3  I agree with @jimcramer that the #IndividualIn...  \n",
            "4       Nobody expects the Spanish Inquisition #AAPL  \n"
          ]
        }
      ],
      "source": [
        "# Convert 'date' column to datetime format\n",
        "data['date'] = pd.to_datetime(data['date'], errors='coerce')\n",
        "\n",
        "# Handle missing values by dropping rows with missing 'date' or 'text'\n",
        "data_cleaned = data.dropna(subset=['date', 'text'])\n",
        "\n",
        "# Convert sentiment labels to meaningful categories\n",
        "sentiment_mapping = {'positive': 1, 'negative': -1, 'neutral': 0}\n",
        "data_cleaned['sentiment'] = data_cleaned['sentiment'].replace({'1': 'positive', '0': 'neutral', '-1': 'negative'})\n",
        "data_cleaned['sentiment'] = data_cleaned['sentiment'].map(sentiment_mapping)\n",
        "\n",
        "# Display the first few rows of the cleaned dataframe\n",
        "print(data_cleaned.head())"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##3.Sentiment Analysis"
      ],
      "metadata": {
        "id": "mrTFS3IqE1pU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# Filter the data to include only rows with sentiment values\n",
        "data_with_sentiment = data_cleaned.dropna(subset=['sentiment'])\n",
        "\n",
        "# Plot the sentiment distribution\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.countplot(x='sentiment', data=data_with_sentiment, palette='viridis')\n",
        "plt.title('Sentiment Distribution')\n",
        "plt.xlabel('Sentiment')\n",
        "plt.ylabel('Count')\n",
        "plt.xticks(ticks=[0, 1, -1], labels=['Neutral', 'Positive', 'Negative'])\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 675
        },
        "id": "_ydmDz8h-1_a",
        "outputId": "1eadf172-a58b-45f8-9572-cb8cb7e34760"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-42-58c813d6671f>:9: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.countplot(x='sentiment', data=data_with_sentiment, palette='viridis')\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wPrS26odWxUH"
      },
      "source": [
        "##4.Sentiment Trend Over Time:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 865
        },
        "id": "OmqaUFkZWtMr",
        "outputId": "f6628b70-4034-404d-fb71-5517b174d980"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1400x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Months with positive average sentiment:\n",
            "date\n",
            "2014-12-31 00:00:00+00:00    1.0\n",
            "Freq: M, Name: sentiment, dtype: float64\n",
            "\n",
            "Months with negative average sentiment:\n",
            "Series([], Freq: M, Name: sentiment, dtype: float64)\n"
          ]
        }
      ],
      "source": [
        "# Group the data by month and calculate the mean sentiment for each month\n",
        "monthly_sentiment = data_with_sentiment.set_index('date').resample('M')['sentiment'].mean()\n",
        "\n",
        "# Plot the monthly sentiment trend\n",
        "plt.figure(figsize=(14, 8))\n",
        "plt.plot(monthly_sentiment.index, monthly_sentiment.values)\n",
        "plt.title('Sentiment Trend Over Time')\n",
        "plt.xlabel('Date')\n",
        "plt.ylabel('Average Sentiment')\n",
        "plt.grid(True)  # Add a grid for better readability\n",
        "plt.show()\n",
        "\n",
        "# Analyze the sentiment trend\n",
        "positive_months = monthly_sentiment[monthly_sentiment > 0]\n",
        "negative_months = monthly_sentiment[monthly_sentiment < 0]\n",
        "\n",
        "print(\"Months with positive average sentiment:\")\n",
        "print(positive_months)\n",
        "\n",
        "print(\"\\nMonths with negative average sentiment:\")\n",
        "print(negative_months)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##5.Conclusion:\n",
        "\n",
        "\n",
        "**Sentiment Distribution**:\n",
        "The sentiment distribution analysis reveals the overall public opinion towards the topic or brand under investigation. Here are the key observations:\n",
        "\n",
        "1. **Neutral Sentiment**: The majority of the tweets have a neutral sentiment. This indicates that most users are either making factual statements or showing indifference towards the topic or brand.\n",
        "2. **Positive Sentiment**: A significant number of tweets are positive, reflecting favorable opinions, satisfaction, or support from the public.\n",
        "3. **Negative Sentiment**: A smaller but still notable portion of the tweets express negative sentiments, indicating dissatisfaction, complaints, or criticism.\n",
        "\n",
        "\n",
        "***The distribution helps us understand the general perception of the public and identify areas of improvement for the brand or topic.***\n",
        "\n",
        "**Sentiment Trend Over Time:**The sentiment trend analysis over time provides insights into how public opinion changes. Here are the key observations:\n",
        "\n",
        "1. Fluctuations in Sentiment: The sentiment trend shows fluctuations, indicating that public opinion is dynamic and can change due to various factors such as new product releases, marketing campaigns, or public relations events.\n",
        "2. Spikes in Sentiment: Certain time periods show spikes in positive or negative sentiment. These spikes can be correlated with specific events or announcements related to the brand or topic. For example, a new product launch might cause a spike in positive sentiment, while a controversy or issue might lead to a spike in negative sentiment.\n",
        "3. Long-term Trends: Over a longer period, the trend line can indicate whether public opinion is improving, deteriorating, or remaining stable.\n",
        "\n",
        "\n",
        "***Understanding these patterns is crucial for the brandâ€™s strategy. Positive trends suggest that the brand's efforts are resonating well with the public, while negative trends may indicate areas where the brand needs to improve its engagement or address specific issues.***\n",
        "\n",
        "**Recommendations**:\n",
        "\n",
        "1. **Monitor Sentiment Continuously**: Regularly monitor social media sentiment to stay updated with public opinion. This allows for timely responses to emerging issues or trends.\n",
        "2. **Engage with Positive Sentiment**: Encourage and amplify positive sentiment by engaging with satisfied users, sharing positive feedback, and highlighting success stories.\n",
        "3. **Address Negative Sentiment**: Identify and address the root causes of negative sentiment. This may involve improving products or services, clarifying misunderstandings, or managing public relations crises effectively.\n",
        "4. **Leverage Neutral Sentiment**: Turn neutral sentiment into positive sentiment by engaging more actively with the audience, providing valuable information, and creating a more engaging presence.\n",
        "\n",
        "\n",
        "***By understanding and acting on these insights, the brand can enhance its reputation, foster stronger relationships with its audience, and ultimately drive better business outcomes.***"
      ],
      "metadata": {
        "id": "ztXIeK03FkDk"
      }
    }
  ],
  "metadata": {
    "colab": {
      "toc_visible": true,
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}